@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp.Formats.Jpeg
@page "/"

<PageTitle>Index</PageTitle>

<h1>File drag and drop & paste</h1>

<div>
    <InputFile multiple OnChange="@OnChange" />
</div>

<div class="image-container">
    @foreach (var imageSource in imageSources)
    {
        <img src="@imageSource" width="100%" height="350px" />
    }
</div>

@if (imageSources.Count > 0)
{
    <div class="image-container">
        <img src="@ColorizedImageUrl" alt="Colorized Image" width="100%" height="350px" />
        <a href="@ColorizedImageUrl" download="colorized_image.jpg">
            <button>Télécharger</button>
        </a>
    </div>
}

@code {
    private const int maxAllowedSize = 3 * 1024 * 1024; // 3MB
    private List<string> imageSources = new List<string>();
    private string OriginalImageUrl => imageSources.Count > 0 ? imageSources[0] : null;
    private string ColorizedImageUrl;
    private string ModifiedImageSource;

    async Task OnChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream(maxAllowedSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            imageSources.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");
        }

        if (imageSources.Count > 0)
        {
            ColorizeImage();
        }
    }

    private void ColorizeImage()
    {
        using (var imageStream = new MemoryStream(Convert.FromBase64String(imageSources[0].Split(',')[1])))
        {
            using (var image = SixLabors.ImageSharp.Image.Load(imageStream))
            {
                image.Mutate(x => x.Grayscale());
                image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Laplacian3x3));
                image.Mutate(x => x.Invert());

                ColorizedImageUrl = ConvertImageToBase64(image);
            }
        }
    }

    private string ConvertImageToBase64(Image image)
    {
        using (MemoryStream ms = new MemoryStream())
        {
            image.Save(ms, new JpegEncoder());
            return $"data:image/jpeg;base64,{Convert.ToBase64String(ms.ToArray())}";
        }
    }
}

@*@using SixLabors.ImageSharp
    @using SixLabors.ImageSharp.Processing
    @using SixLabors.ImageSharp.Formats.Jpeg
    @page "/"

    <PageTitle>Index</PageTitle>

    <h1>File drag and drop & paste</h1>

    <div>
        <InputFile multiple OnChange="@OnChange" />
    </div>

    <div class="image-container">
        @foreach (var imageSource in imageSources)
        {
            <img src="@imageSource" width="100%" height="350px" />
        }
    </div>

    @if (imageSources.Count > 0)
    {
        <div class="image-container">
            <img src="@ColorizedImageUrl" alt="Colorized Image" width="100%" height="350px" />

        </div>
    }

    @code {
        private const int maxAllowedSize = 3 * 1024 * 1024; // 3MB
        private List<string> imageSources = new List<string>();
        private string OriginalImageUrl => imageSources.Count > 0 ? imageSources[0] : null;
        private string ColorizedImageUrl;
        private string ModifiedImageSource;

        async Task OnChange(InputFileChangeEventArgs e)
        {
            foreach (var file in e.GetMultipleFiles())
            {
                using var stream = file.OpenReadStream(maxAllowedSize);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                imageSources.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");
            }

            if (imageSources.Count > 0)
            {
                ColorizeImage();
            }
        }

        private void ColorizeImage()
        {
            // Charger l'image originale à partir des données base64
            using (var imageStream = new MemoryStream(Convert.FromBase64String(imageSources[0].Split(',')[1])))
            {
                // doc sixlabors : https://github.com/SixLabors/ImageSharp/tree/main
                using (var image = SixLabors.ImageSharp.Image.Load(imageStream))
                {
                    // Transforme les couleurs en gris
                    image.Mutate(x => x.Grayscale());

                    // Détecte les contours dans l'image
                    image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Laplacian3x3));
                    //à tester :
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Kayyali));
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Kayyali));
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Kirsch));
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Laplacian3x3));
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Laplacian5x5));
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.LaplacianOfGaussian));
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Prewitt));//sympas
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.RobertsCross));
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Robinson));
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Scharr));//hyper noir
                    //this.image.Mutate(x => x.DetectEdges(KnownEdgeDetectorKernels.Sobel));//ca va mais un peu noir
                    // Inverse les couleurs pour obtenir le résultat final
                    image.Mutate(x => x.Invert());

                    ColorizedImageUrl = ConvertImageToBase64(image);
                }
            }
        }
        private string ConvertImageToBase64(Image image)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                image.Save(ms, new JpegEncoder());
                return $"data:image/jpeg;base64,{Convert.ToBase64String(ms.ToArray())}";
            }
        }
    }*@
